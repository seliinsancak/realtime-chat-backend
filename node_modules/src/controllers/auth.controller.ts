import { Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { User } from "../models/User";

export const register = async (req: Request, res: Response) => {
try {
const { username, email, password } = req.body;
const existing = await User.findOne({ $or: [{ email }, { username }] });
if (existing) return res.status(400).json({ message: "Kullanıcı zaten var" });

const hashed = await bcrypt.hash(password, 10);
const user = await User.create({ username, email, password: hashed });

const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET!, { expiresIn: process.env.JWT_EXPIRES_IN });
res.status(201).json({ token, user });

} catch (err) {
res.status(500).json({ message: "Sunucu hatası", error: err });
}
};

export const login = async (req: Request, res: Response) => {
try {
const { email, password } = req.body;
const user = await User.findOne({ email });
if (!user) return res.status(404).json({ message: "Kullanıcı bulunamadı" });

const isMatch = await bcrypt.compare(password, user.password);
if (!isMatch) return res.status(401).json({ message: "Şifre hatalı" });

const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET!, { expiresIn: process.env.JWT_EXPIRES_IN });
res.json({ token, user });

} catch (err) {
res.status(500).json({ message: "Sunucu hatası", error: err });
}
};